package com.damu.collection;

import java.util.concurrent.ConcurrentSkipListSet;
import java.util.concurrent.CopyOnWriteArraySet;

public class CopyOnWriteArraySetDemo {
    public static void main(String[] args) {
        // üîê Thread-Safe Set Implementations

        // ‚úÖ CopyOnWriteArraySet
        // ‚û§ Based on CopyOnWriteArrayList
        // ‚û§ On write (add/remove), it makes a fresh copy of the array
        // ‚û§ Good for read-heavy operations
        // ‚û§ Slow on write-heavy usage (due to copying)
        // ‚û§ Iterators do NOT reflect modifications made during iteration
        // ‚û§ Maintains insertion order
        // ‚û§ No duplicates allowed

        // ‚úÖ ConcurrentSkipListSet
        // ‚û§ Backed by ConcurrentSkipListMap (internally)
        // ‚û§ Sorted Set (Natural Order or Comparator)
        // ‚û§ Thread-safe using lock-free algorithms (CAS)
        // ‚û§ Modifications DURING iteration are allowed and reflected
        // ‚û§ Suitable for concurrent applications with sorted data

        CopyOnWriteArraySet<Integer> copyOnWriteSet = new CopyOnWriteArraySet<>();
        ConcurrentSkipListSet<Integer> concurrentSkipListSet = new ConcurrentSkipListSet<>();

        // ‚úÖ Adding elements (1 to 5)
        for (int i = 1; i <= 5; i++) {
            copyOnWriteSet.add(i);
            concurrentSkipListSet.add(i);
        }

        System.out.println("Initial CopyOnWriteArraySet: " + copyOnWriteSet);
        System.out.println("Initial ConcurrentSkipListSet: " + concurrentSkipListSet);

        // ‚úÖ Iterating & modifying CopyOnWriteArraySet
        // ‚û§ Adding 6 multiple times, but only one will be added
        // ‚û§ Iterator will NOT see modifications during loop
        System.out.println("\nIterating and modifying CopyOnWriteArraySet:");
        for (Integer num : copyOnWriteSet) {
            System.out.println("Reading from CopyOnWriteArraySet: " + num);
            copyOnWriteSet.add(6); // Will not cause ConcurrentModificationException
        }
        System.out.println("After iteration: " + copyOnWriteSet);

        // ‚úÖ Iterating & modifying ConcurrentSkipListSet
        // ‚û§ Allows concurrent modification
        // ‚û§ Updated set will be visible to next iterations
        System.out.println("\nIterating and modifying ConcurrentSkipListSet:");
        for (Integer num : concurrentSkipListSet) {
            System.out.println("Reading from ConcurrentSkipListSet: " + num);
            concurrentSkipListSet.add(6); // No ConcurrentModificationException
        }
        System.out.println("After iteration: " + concurrentSkipListSet);
    }
}
